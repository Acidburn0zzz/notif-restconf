<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-ietf-netconf-restconf-notif-05"
     ipr="trust200902">
     
  <front>
    <title abbrev="RESTCONF-Notif">RESTCONF and HTTP Transport for Event Notifications</title>

    <author fullname="Eric Voit" initials="E." surname="Voit">
      <organization>Cisco Systems</organization>

      <address>
        <email>evoit@cisco.com</email>
      </address>
    </author>

    <author fullname="Einar Nilsen-Nygaard" initials="E"
            surname="Nilsen-Nygaard">
      <organization>Cisco Systems</organization>
      <address>
         <email>einarnn@cisco.com</email>
      </address>
    </author>

    <author fullname="Alexander Clemm" initials="A" surname="Clemm">
        <organization>Huawei</organization>
        <address>
            <email>ludwig@clemm.org</email>
        </address>
    </author>    

    <author fullname="Andy Bierman" initials="A"
            surname="Bierman">
      <organization>YumaWorks</organization>
      <address>
         <email>andy@yumaworks.com</email>
      </address>
    </author>
    
    <date day="18" month="May" year="2018"/>

    <area>Operations &amp; Management</area>

    <workgroup>NETCONF</workgroup>

    <keyword>Draft</keyword>

    <abstract>
        <t>This document defines RESTCONF, HTTP2, and HTTP1.1 bindings for the transport of subscription requests and corresponding push updates. Being subscribed may be either publisher defined event streams or nodes/subtrees of YANG Datastores.</t>
    </abstract>
  </front>

  <middle> 
    <section title="Introduction">
      <t>Mechanisms to support event subscription and push are defined in <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/>. Enhancements to <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/> which enable YANG datastore subscription and push are defined in <xref target="I-D.ietf-netconf-yang-push"/>. This document provides a transport specification for these protocols over RESTCONF <xref target="RFC8040"/> and HTTP.  Driving these requirements is <xref target="RFC7923"/>.</t>

      <t>The streaming of notifications encapsulating the resulting information push can be done with either HTTP1.1 <xref target="RFC7231"/> or HTTP2 <xref target="RFC7540"/>.  </t>
      
    </section>

    <section title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.</t>

      <t>The following terms use the definitions from <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/>: configured subscription, dynamic subscription, event stream, notification message, publisher, receiver, subscriber, and subscription.</t>
      
      <t>Other terms reused include datastore, which is defined in <xref target="RFC8342"/>, and HTTP2 stream which maps to the definition of "stream" within <xref target="RFC7540"/>, Section 2.</t>

      <t>[ note to the RFC Editor - please replace XXXX within this document with the number of this document ]</t>
      

    </section>
    
    
    <section title="Dynamic Subscription">
    
      <t>This section provides specifics on how to establish and maintain dynamic subscriptions over HTTP 1.1 and HTTP2 via signaling messages transported over RESTCONF <xref target="RFC8040"/>. Subscribing to event streams is accomplished in this way via a RESTCONF POST into RPCs defined within <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/> Section 2.4.   YANG datastore subscription is accomplished via augmentations to <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/> as described within <xref target="I-D.ietf-netconf-yang-push"/> Section 4.4.</t>
      
      <t>Common across all HTTP based dynamic subscriptions is that a POST needs to be made against a specific URI on the Publisher. Subscribers cannot pre-determine the URI against which a subscription might exist on a publisher, as the URI will only exist after the "establish-subscription" has been accepted. There subscription URI will be determined and sent as part of the response to the "establish-subscription", and a subsequent POST to this URI will be done in order to start the flow of notification messages back to the subscriber.  A subscription does not become ACTIVE as per Section 2.4.1. of <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/> until the POST is received.</t>

      <section title="Transport Connectivity">
      
        <t>For a dynamic subscription, where an HTTP client session doesn't already exist, a new client session is initiated from the subscriber.  If the subscriber is unsure if HTTP2 is supported by the publisher, HTTP1.1 will be used for initial messages, and these messages will include an HTTP version upgrade request as per <xref target="RFC7230"/>, Section 6.7.  If a publisher response indicates that HTTP2 is supported, HTTP2 will be used between subscriber and publisher for future HTTP interactions as per <xref target="RFC7540"/>.</t>

        <t>A subscriber SHOULD establish the HTTP session over TLS <xref target="RFC5246"/> in order to secure the content in transit.</t>

        <t>Without the involvement of additional protocols, neither HTTP1.1 nor HTTP2 sessions by themselves allow for a quick recognition of when the communication path has been lost with the publisher.  Where quick recognition of the loss of a publisher is required, a subscriber SHOULD connect over TLS <xref target="RFC5246"/>, and use a TLS heartbeat <xref target="RFC6520"/> to track HTTP session continuity.  In the case where a TLS heartbeat is included, it should be sent just from receiver to publisher.  Loss of the heartbeat MUST result in any subscription related TCP sessions between those endpoints being torn down.  A subscriber can then attempt to re-establish.</t>
      
      </section>
      
      <section title="Discovery">
      
        <t>Subscribers can learn what event streams a RESTCONF server supports by querying the "streams" container of ietf-subscribed-notification.yang. Subscribers can learn what datastores a RESTCONF server supports by following <xref target="I-D.draft-ietf-netconf-nmda-restconf"/>. </t>
      
      </section>
      
      <section title="RESTCONF RPCs and HTTP Status Codes">   
      
        <t>Specific HTTP responses codes as defined in <xref target="RFC7231"/> section 6 will indicate the result of RESTCONF RPC requests with publisher.  An HTTP status code of 200 is the proper response to any successful RPC defined within <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/> or <xref target="I-D.ietf-netconf-yang-push"/>.</t>
          
        <t>If a publisher fails to serve the RPC request for one of the reasons indicated in <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/> Section 2.4.6 or <xref target="I-D.ietf-netconf-yang-push"/> Appendix A, this will be indicated by "406" status code transported in the HTTP response.</t>
        
        <t>When a "406" status code is returned, the RPC reply MUST include an "rpc-error" element per <xref target="RFC8040"/> Section 7.1 with the following parameter values:
        <list style="symbols">
          <t>an "error-type" node of "application".</t>

          <t>an "error-tag" node of "operation-failed".</t>

          <t>an "error-app-tag" node with the value being a string that corresponds to an identity associated with the error, as defined in <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/> section 2.4.6 for general subscriptions, and <xref target="I-D.ietf-netconf-yang-push"/> Appendix A.1, for datastore subscriptions. The tag to use depends on the RPC for which the error occurred.  Viable errors for different RPCs are as follows:</t>

        </list></t>
    
        <figure align="left">
            <artwork><![CDATA[
         RPC                     select an identity with a base 
         ----------------------  ------------------------------
         establish-subscription  establish-subscription-error     
         modify-subscription     modify-subscription-error
         delete-subscription     delete-subscription-error    
         kill-subscription       kill-subscription-error
         resynch-subscription    resynch-subscription-error
              ]]></artwork>
        </figure>
    
        <t>Each error identity will be inserted as the "error-app-tag" using JSON encoding following the form &lt;modulename&gt;:&lt;identityname&gt;.  An example of such as valid encoding would be "ietf-subscribed-notifications:no-such-subscription".</t>
    
        <t><list style="symbols">
          <t>In case of error responses to an "establish-subscription" or "modify-subscription" request there is the option of including an "error-info" node.  This node may contain hints for parameter settings that might lead to successful RPC requests in the future.   Following are the yang-data structures which may be returned:</t>
        </list></t>
    
        <figure align="left">
          <artwork><![CDATA[    
      establish-subscription returns hints in yang-data structure
      ---------------------- ------------------------------------      
      target: event stream   establish-subscription-stream-error-info
      target: datastore      establish-subscription-datastore-error-info
            
      modify-subscription    returns hints in yang-data structure
      ---------------------- ------------------------------------      
      target: event stream   modify-subscription-stream-error-info
      target: datastore      modify-subscription-datastore-error-info

      The yang-data included within "error-info" SHOULD NOT include the
      optional leaf "error-reason", as such a leaf would be redundant
      with information that is already placed within the
      "error-app-tag".
       
      In case of an rpc error as a result of a "delete-subscription", a
      "kill-subscription", or a "resynch-subscription" request, no
      "error-info" needs to be included, as the "subscription-id" is 
      the only RPC input parameter and no hints regarding this RPC input
      parameters need to be provided.
            ]]></artwork>
        </figure>

        <t>Note that "error-path" does not need to be included with the "rpc-error" element, as subscription errors are generally not associated with nodes in the datastore but with the choice of RPC input parameters. </t>

      </section>  
      
      <section title="Call Flow for HTTP2">
        <t>Requests to <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/> or <xref target="I-D.ietf-netconf-yang-push"/> augmented RPCs are sent on one or more HTTP2 streams indicated by (a) in <xref target="dyn-http2"/>.  A successful "establish-subscription" will result in an RPC response returned with both a subscription identifier which uniquely identifies a subscription, as well as a URI which uniquely identifies the location of subscription on the publisher.  This URI is defined via the "uri" leaf the Data Model in <xref target="YANG-module"/>.  </t> 
          
        <t>An HTTP POST is then sent on a logically separate HTTP2 stream (b) to the URI on the publisher.  This initiates to initiate the flow of notification messages which are sent in HTTP Data frames as a response to the POST.  In the case below, a newly established subscription has its associated notification messages pushed over HTTP2 stream (7).  These notification messages are placed into a HTTP2 Data frame (see [RFC7540] Section 6.1).</t>
          
        <figure title="Dynamic with HTTP2"
                anchor="dyn-http2"
                align="center">
          <artwork height="30" xml:space="preserve"><![CDATA[
+------------+                                 +------------+
| Subscriber |                                 | Publisher  |
|HTTP2 Stream|                                 |HTTP2 Stream|
|  (a)  (b)  |                                 |  (a)  (b)  |
+------------+                                 +------------+
    | RESTCONF POST (RPC:establish-subscription)   |
    |--------------------------------------------->|
    |                          HTTP 200 OK (ID,URI)|
    |<---------------------------------------------|
    |   (7)HTTP POST (URI)                             (7)
    |    |--------------------------------------------->|
    |    |                                   HTTP 200 OK|
    |    |<---------------------------------------------|
    |    |                     HTTP Data (notif-message)|
    |    |<---------------------------------------------|
    | RESTCONF POST (RPC:modify-subscription)      |    |
    |--------------------------------------------->|    |
    |    |                              HTTP 200 OK|    |
    |<---------------------------------------------|    |
    |    |             HTTP Data (subscription-modified)|
    |    |<------------------------------------------(c)|
    |    |                     HTTP Data (notif-message)|
    |    |<---------------------------------------------|
    | RESTCONF POST (RPC:delete-subscription)      |    |
    |--------------------------------------------->|    |
    |    |                              HTTP 200 OK|    |
    |<---------------------------------------------|    |
    |    |                  HTTP Headers (end of stream)|
    |   (/7)<-----------------------------------------(/7)
    |]]></artwork>
        </figure>   

        <t>Additional requirements for dynamic subscriptions over HTTP2 include:</t>
        <t><list style="symbols">
          <t>A unique HTTP2 stream MAY be used for each subscription.</t>
          <t>A single HTTP2 stream MUST NOT be used for subscriptions with different DSCP values.</t>
          <t>All subscription state notifications from a publisher MUST be returned in a separate HTTP Data frame within the HTTP2 stream used by the subscription to which the state change refers.</t>
          <t>In addition to an RPC response for a "modify-subscription" RPC traveling over (a), a "subscription-modified" state change notification must be sent within HTTP2 stream (b).  This allows the receiver to know exactly when the new terms of the subscription have been applied to the notification messages.  See arrow (c).</t>
          <t>Additional RPCs for a particular subscription MUST NOT use the HTTP2 stream currently providing notification messages subscriptions.</t>
          <t>An HTTP end of stream message MUST not be sent until all subscriptions using that HTTP2 stream have completed.</t>
        </list></t>    
          
      </section>

      <section title="Call flow for HTTP1.1">
        <t>The call flow is defined in <xref target="dyn-http11"/>.  Requests to <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/> or <xref target="I-D.ietf-netconf-yang-push"/> augmented RPCs are sent on a TCP connection indicated by (a).  A successful "establish-subscription" will result in an RPC response returned with both a subscription identifier which uniquely identifies a subscription, as well as a URI which uniquely identifies the location of subscription on the publisher (b). This URI is defined via the "uri" leaf the Data Model in <xref target="YANG-module"/>. </t> 
          
        <t>An HTTP POST is then sent on a logically separate TCP connection (b) to the URI on the publisher.  This initiates to initiate the flow of notification messages which are sent in SSE <xref target="W3C-20150203"/> as a response to the POST.</t>
          
        <figure title="Dynamic with HTTP1.1"
                anchor="dyn-http11"
                align="center">
          <artwork height="29" xml:space="preserve"><![CDATA[
+--------------+                             +--------------+
|  Subscriber  |                             |   Publisher  |
|TCP connection|                             |TCP connection|
|  (a)  (b)    |                             |    (a)  (b)  |
+--------------+                             +--------------+
    | RESTCONF POST (RPC:establish-subscription)   |
    |--------------------------------------------->|
    |                          HTTP 200 OK (ID,URI)|
    |<---------------------------------------------|
    |    |HTTP GET (URI)                                |
    |    |--------------------------------------------->|
    |    |                                   HTTP 200 OK|
    |    |<---------------------------------------------|
    |    |                           SSE (notif-message)|
    |    |<---------------------------------------------|
    | RESTCONF POST (RPC:modify-subscription)      |    |
    |--------------------------------------------->|    |
    |    |                              HTTP 200 OK|    |
    |<---------------------------------------------|    |
    |    |                   SSE (subscription-modified)|
    |    |<------------------------------------------(c)|
    |    |                           SSE (notif-message)|
    |    |<---------------------------------------------|
    | RESTCONF POST (RPC:delete-subscription)      |    |
    |--------------------------------------------->|    |
    |    |                              HTTP 200 OK|    |
    |<---------------------------------------------|    |
    |    |                                              |
    |    |]]></artwork>
        </figure>  

        <t>Additional requirements for dynamic subscriptions over HTTP1.1 include:</t>
        <t><list style="symbols">
          <t>All subscription state notifications from a publisher MUST be returned in a separate SSE message used by the subscription to which the state change refers.</t>
          <t>Subscription RPCs MUST NOT use the TCP connection currently providing notification messages for that subscription.</t>
          <t>In addition to an RPC response for a "modify-subscription" RPC traveling over (a), a "subscription-modified" state change notification must be sent within stream (b).  This allows the receiver to know exactly when the new terms of the subscription have been applied to the notification messages.  See arrow (c).</t>
        </list></t> 

        <t>Open question, should we just eliminate this possibility of HTTP1.1 for subscriptions?  It would make the design simpler.</t>

          
      </section>      
 
    </section> 
   
    <section title="Configured Subscription">
        
      <t>With a configured subscription, all information needed to establish a secure relationship with that receiver is available on the publisher. With this information, the publisher will establish a secure transport connection with the receiver and then begin pushing notification messages to the receiver. Since RESTCONF might not exist on the receiver, it is not desirable to require that subscribed content be pushed with any dependency on RESTCONF. Therefore in place of RESTCONF, an HTTP2 Client connection must be established with an HTTP2 Server located on the receiver. Notification messages will then be sent as part of an extended HTTP POST to the receiver.</t>
          
      <section title="Transport Connectivity">
      
        <t>Configured subscriptions MUST only be connected over HTTP2 via a client session initiated from the publisher.  Following are the conditions which MUST be met before estabishing a new HTTP2 connection with a receiver:</t>
          
        <t><list style="symbols">
          <t>a configured subscription has a receiver in the CONNECTING state as described in <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/>, section 2.5.1.,</t>
          <t>the transport configured for that subscription is HTTP2, </t>
          <t>there are state change notifications or notification messages pending for that receiver, and</t>
          <t>no HTTP2 transport session exists to that receiver,</t>
        </list></t>
          
        <t>If the above conditions are met, then the publisher MUST initiate a transport session via RESTCONF call home <xref target="RFC8071"/>, section 4.1 to that receiver.  HTTP2 only communications must be used as per <xref target="RFC7540"/>, Section 3.3 when the HTTP session over TLS [RFC5246]. and  <xref target="RFC7540"/>, Section 3.4 when transporting cleartext over TCP.  Note that a subscriber SHOULD establish over TLS in order to secure the content in transit.</t>


        <t>If the RESTCONF call home fails because the publisher receives receiver credentials which are subsequently declined per <xref target="RFC8071"/>, Section 4.1, step S5 authentication, then that receiver MUST be placed into the TIMEOUT state.</t>
    
        <t>If the call home fails to establish for any other reason, the publisher MUST NOT progress the receiver to the ACTIVE state. Additionally, the publisher SHOULD place the receiver into the TIMEOUT state after a predetermined number of either failed call home attempts or remote transport session termination by the receiver.</t>
      
      </section>          
  
      <section title="Call Flow">
 
        <t>With HTTP2 connectivity established, a POST of each new "subscription-started" state change notification messages will be addressed to HTTP augmentation code on the receiver capable of accepting and acknowleding to subscription state change notifications.  Until the "HTTP 200 OK" at point (c) of <xref target="conf-HTTP2"/> for each the "subscription-started" state change notification, a publisher MUST NOT progress the receiver to the ACTIVE state.   In other words, is at point (c) which indicates that the receiver is ready for the delivery of subscribed content. At this point a notification-messages including subscribed content may be placed onto an HTTP2 stream for that subscription.</t>
          
        <figure title="Configured over HTTP2"
                anchor="conf-HTTP2"
                align="center">
          <artwork height="15" xml:space="preserve"><![CDATA[
+------------+                                 +------------+
|  Receiver  |                                 | Publisher  |
|HTTP2 Stream|                                 |HTTP2 Stream|
|  (a)  (b)  |                                 |  (a)  (b)  |
+------------+                                 +------------+
    |HTTP Post Headers, Data (subscription-started)|
    |<---------------------------------------------|
    | HTTP 200 OK                                  |
    |-------------------------------------------->(c)
    |    |       HTTP Post Headers, Data (notif-message)|
    |    |<---------------------------------------------|
    |    |                     HTTP Data (notif-message)|
    |    |<---------------------------------------------|
    |    |                    HTTP Data (sub-terminated)|
    |    |<---------------------------------------------|
    |    |HTTP 200 OK                                   |
    |    |--------------------------------------------->|]]></artwork>
        </figure>
        
        <t>Additional requirements for configured subscriptions over HTTP2 include:</t>
        <t><list style="symbols">
          <t>A unique HTTP2 stream MAY be used for each subscription.</t>
          <t>A single HTTP2 stream MUST NOT be used for subscriptions with different DSCP values.</t>
          <t>All subscription state notifications from a publisher MUST be returned in a separate HTTP Data frame within the HTTP2 stream used by the subscription to which the state change refers.</t>
          <t>An HTTP end of stream message MUST not be sent until all subscriptions using that HTTP2 stream have completed.</t>
        </list></t> 
        
      </section>
       
    </section>
    
    <section title="QoS Treatment">
    
      <t>To meet subscription quality of service promises, the publisher MUST take any existing subscription "dscp" and apply it to the DSCP marking in the IP header.</t>
    
      <t>In addition, where HTTP2 transport is available to a notification message queued for transport to a receiver, the publisher MUST:</t>

      <t><list style="symbols">
        <t>take any existing subscription "priority" and copy it into the HTTP2 stream priority, and </t>

        <t>take any existing subscription "dependency" and map the HTTP2 stream for the parent subscription into the HTTP2 stream dependency.</t>
        
      </list></t>
          
    </section>

    <section title="Mandatory JSON and datastore support">

      <t>A publisher supporting <xref target="I-D.ietf-netconf-yang-push"/> MUST support the "operational" datastore as defined by <xref target="RFC8342"/>.</t>
      
      <t>The "encode-json" feature of <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/> is mandatory to support.  This indicates that JSON is a valid encoding for RPCs, state change notifications, and subscribed content.</t>
      
    </section>
    
    <section title="Notification Messages">
      <t>Notification messages transported over HTTP will be encoded using one-way operation schema defined within <xref target="RFC5277"/>, section 4.</t>
    </section>

    <section title="YANG Tree" anchor="YANG-tree" >
    
      <t> The YANG model defined in <xref target="YANG-module"/> has one leaf augmented into four places of <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/>, plus two identities.  As the resulting full tree is large, it will only be inserted at later stages of this document.</t>
    
    </section>
    
    <section title="YANG module" anchor="YANG-module" >
  
      <t>This module references <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/>.</t>

      <figure>
         <artwork><![CDATA[
<CODE BEGINS> file "ietf-http-subscribed-notifications@2018-05-01.yang"
module ietf-http-subscribed-notifications {
  yang-version 1.1;
  namespace 
    "urn:ietf:params:xml:ns:yang:ietf-http-subscribed-notifications";

  prefix hsn;

  import ietf-subscribed-notifications {
    prefix sn;
  }
  import ietf-yang-types {
    prefix yang;
  }
  
  organization "IETF NETCONF (Network Configuration) Working Group";
  contact
    "WG Web:   <http:/tools.ietf.org/wg/netconf/>
     WG List:  <mailto:netconf@ietf.org>
          
     Editor:   Eric Voit
               <mailto:evoit@cisco.com>
     
     Editor:   Alexander Clemm
               <mailto:ludwig@clemm.org>
               
     Editor:   Einar Nilsen-Nygaard
               <mailto:einarnn@cisco.com>";

  description
    "Defines HTTP variants as a supported transports for subscribed
    event notifications.
    
    Copyright (c) 2018 IETF Trust and the persons identified as authors 
    of the code.  All rights reserved.

    Redistribution and use in source and binary forms, with or without 
    modification, is permitted pursuant to, and subject to the license 
    terms contained in, the Simplified BSD License set forth in Section 
    4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC XXXX; see the RFC 
    itself for full legal notices.";
  
  revision 2018-05-01 {
    description
      "Initial version";
    reference 
    "RFC XXXX: RESTCONF and HTTP Transport for Event Notifications";
  }

  identity http2 {
    base sn:transport;
    base sn:inline-address;
    base sn:configurable-encoding;
    description
      "HTTP2 is used a transport for notification messages and state
       change notifications.";
  }

  identity http1.1 {
    base sn:transport;
    base sn:inline-address;
    base sn:configurable-encoding;
    description
      "HTTP1.1 is used a transport for notification messages and state
       change notifications.";
  }

  grouping uri {
    description
      "Provides a reusable description of a URI.";   
    leaf uri {
      config false;
      type yang:uri;
      description
        "Location of a subscription specific URI on the publisher.";
    }
  }
  
  augment "/sn:establish-subscription/sn:output" {
    description
      "This augmentation allows HTTP specific parameters for a 
      response to a publisher's subscription request.";
    uses uri;
  } 
  
  augment "/sn:subscriptions/sn:subscription/sn:target" {
    description
      "This augmentation allows HTTP specific parameters to be
       exposed for a subscription.";
    uses uri;
  }

  augment "/sn:subscription-started/sn:target" {
    description
      "This augmentation allows HTTP specific parameters to be included 
      part of the notification that a subscription has started.";
    uses uri;
  }  

  augment "/sn:subscription-modified/sn:target" {
    description
      "This augmentation allows HTTP specific parameters to be included 
      part of the notification that a subscription has been modified.";
    uses uri;
  } 
  
  
/* need to add a constraint that HTTP1.1 not allowed for 
configured subscriptions - needs the right syntax below...
  
  augment "sn:subscriptions/sn:subscription/sn:protocol" {
    when '../sn:configured-subscription-state'
    must ' protocol <> "http1.1"' {
      error-message "HTTP1.1 not used for configured subscriptions";
    }
  }

*/  

}
<CODE ENDS> 
              ]]></artwork>
          </figure> 
    </section>

    <section title="IANA Considerations">
      <t>
      This document registers the following namespace URI in the "IETF XML Registry" <xref target="RFC3688"/>:
      </t>

      <t>
      URI:  
      urn:ietf:params:xml:ns:yang:ietf-http-subscribed-notifications
      <vspace/>
      Registrant Contact: The IESG.
      <vspace/>
      XML: N/A; the requested URI is an XML namespace.
      </t>
   
      <t>
      This document registers the following YANG module in the "YANG Module Names" registry <xref target="RFC6020"/>:
      </t>
    
      <t>
      Name:         ietf-http-subscribed-notifications
      <vspace/>
      Namespace:    
      urn:ietf:params:xml:ns:yang:ietf-http-subscribed-notifications
      <vspace/>
      Prefix:       hsn
      <vspace/>
      Reference: RFC XXXX: RESTCONF and HTTP Transport for Event Notifications
      </t>
    </section>
  
    <section title="Security Considerations">
 
      <t>The YANG module specified in this document defines a schema for data that is designed to be accessed via network management transports such as NETCONF <xref target="RFC6241"/> or RESTCONF <xref target="RFC8040"/>.  The lowest NETCONF layer is the secure transport layer, and the mandatory-to-implement secure transport is Secure Shell (SSH) <xref target="RFC6242"/>.  The lowest RESTCONF layer is HTTPS, and the mandatory-to-implement secure transport is TLS <xref target="RFC5246"/>.</t>
      
      <t>The one new data node introduced in this YANG module may be considered sensitive or vulnerable in some network environments.  It is thus important to control read access (e.g., via get, get-config, or notification) to this data nodes.  These are the subtrees and data nodes and their sensitivity/vulnerability:</t>

      <t>Container: "/subscriptions"</t>
      <t><list style="symbols"> 
        <t>"uri": leaf will show where subscribed resources might be located on a publisher.  Access control must be set so that only someone with proper access permissions, and perhaps even HTTP session has the ability to access this resource.</t>                   
      </list></t>
      
      <t>One or more publishers of configured subscriptions could be used to overwhelm a receiver which doesn't even support subscriptions.  There are two protections needing support on a publisher.  First, notification messages for configured subscriptions MUST only be transmittable over encrypted transports.  Clients which do not want pushed content need only terminate or refuse any transport sessions from the publisher.  Second, the HTTP transport augmentation on the receiver must send an HTTP 200 OK to a subscription started notification before the publisher starts streaming any subscribed content.</t>

      <t>One or more publishers could overwhelm a receiver which is unable to control or handle the volume of Event Notifications received.  In deployments where this might be a concern, HTTP2 transport such as HTTP2) should be selected.</t>
      
      <t>The NETCONF Authorization Control Model <xref target="RFC6536"/> SHOULD be used to control and restrict authorization of subscription configuration.</t>

    </section>

    <section title="Acknowledgments">
      <t>We wish to acknowledge the helpful contributions, comments, and suggestions that were received from: Susan Hares, Tim Jenkins, Balazs Lengyel, Kent Watsen, Michael Scharf, and Guangying Zheng.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.3688"?>
      <?rfc include="reference.RFC.5246"?>
      <?rfc include="reference.RFC.5277"?>
      <?rfc include="reference.RFC.6020"?>
      <?rfc include="reference.RFC.6241"?>
      <?rfc include="reference.RFC.6242"?>
      <?rfc include="reference.RFC.6520"?>
      <?rfc include="reference.RFC.6536"?>
      <?rfc include="reference.RFC.7230"?>
      <?rfc include="reference.RFC.7540"?>
      <?rfc include="reference.RFC.8040"?>
      <?rfc include="reference.RFC.8342"?>

      <reference anchor="I-D.draft-ietf-netconf-subscribed-notifications">
        <front>
          <title>Custom Subscription to Event Streams</title>
          <author fullname="Eric Voit" initials="E" surname="Voit">
            <organization/>
          </author>
          <author fullname="Alexander Clemm" initials="A" surname="Clemm">
            <organization/>
          </author>
          <author fullname="Alberto Gonzalez Prieto" initials="A"
                  surname="Gonzalez Prieto">
            <organization/>
          </author>
          <author fullname="Ambika Prasad Tripathy" initials="A"
                  surname="Tripathy">
            <organization/>
          </author>
          <author fullname="Einar Nilsen-Nygaard" initials="E"
                  surname="Nilsen-Nygaard">
            <organization/>
          </author>
          <date month="April" year="2018"/>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-netconf-subscribed-notifications-13"/>
        <format target="https://datatracker.ietf.org/doc/draft-ietf-netconf-subscribed-notifications/"
                type="TXT"/>
      </reference>
      
      <reference anchor="I-D.ietf-netconf-yang-push"
                 target="https://datatracker.ietf.org/doc/draft-ietf-netconf-yang-push/">
        <front>
          <title>Subscribing to YANG datastore push updates</title>

          <author fullname="Alexander Clemm" initials="A" surname="Clemm">
            <organization>Huawei</organization>
          </author>

          <author fullname="Eric Voit" initials="E" surname="Voit">
            <organization>Cisco</organization>
          </author>
          
          <author fullname="Alberto Gonzalez Prieto" initials="A"
                  surname="Gonzalez Prieto">
            <organization>VMWare</organization>
          </author>

          <author fullname="Ambika Prasad Tripathy" initials="A"
                  surname="Prasad Tripathy">
            <organization>Cisco</organization>
          </author>

          <author fullname="Einar Nilsen-Nygaard" initials="E"
                  surname="Nilsen-Nygaard">
            <organization>Cisco</organization>
          </author>
          
          <author fullname="Andy Bierman" initials="A"
                  surname="Bierman">
            <organization>YumaWorks</organization>
          </author>
          
          <author fullname="B Lengyel" initials="B"
                  surname="Lengyel">
            <organization>Ericsson</organization>
          </author>

          <date day="1" month="March" year="2017"/>
        </front>
      </reference>
    
    
      <reference anchor="W3C-20150203"
                 target="https://www.w3.org/TR/2015/REC-eventsource-20150203/">
        <front>
          <title>Server-Sent Events, World Wide Web Consortium CR
          CR-eventsource-20121211</title>

          <author fullname="I Hickson">
            <organization/>
          </author>

          <date month="February" year="2015"/>
        </front>
      </reference>
      
      <reference anchor="GRPC" target="https://grpc.io/">
        <front>
          <title>RPC framework that runs over HTTP2</title>

          <author fullname="Google">
            <organization/>
          </author>

          <date month="August" year="2017"/>
        </front>
      </reference>

    </references>

    <references title="Informative References">
    
      <?rfc include="reference.RFC.7231"?>       
      <?rfc include="reference.RFC.7923"?>
      <?rfc include="reference.RFC.8071"?>
 
      <reference anchor="I-D.draft-ietf-netconf-nmda-restconf"
                 target="https://datatracker.ietf.org/doc/draft-ietf-netconf-nmda-restconf/">
        <front>
          <title>RESTCONF Extensions to Support the Network Management Datastore Architecture</title>

          <author fullname="Martin Bjorklund" initials="M" surname="Bjorklund"></author>
          <author fullname="Juergen Schoenwaelder" initials="J" surname="Schoenwaelder"></author>
          <author fullname="Phil Shafer" initials="P" surname="Shafer"></author>
          <author fullname="Kent Watsen" initials="K" surname="Watsen"></author>
          <author fullname="Rob Wilton" initials="R" surname="Wilton"></author>

          <date month="April" year="2018"/>
        </front>
      </reference> 
      
      <reference anchor="I-D.draft-ietf-netconf-netconf-event-notifications"
                 target="https://datatracker.ietf.org/doc/draft-ietf-netconf-netconf-event-notifications/">
        <front>
          <title>NETCONF support for event notifications</title>
          <author fullname="A Clemm" initials="Alexander" surname="Clemm"></author>
          <author fullname="E Voit" initials="Eric" surname="Voit"></author>
          <author fullname="A Gonzalez Prieto" initials="Alberto" surname="Gonzalez Prieto"></author>
          <author fullname="Einar Nilsen-Nygaard" initials="E" surname="Nilsen-Nygaard"></author>
          <author fullname="Ambika Prasad Tripathy" initials="A" surname="Tripathy"></author>
          <date month="May" year="2018"/>
        </front>
      </reference>

    </references>

    <section title="RESTCONF over GRPC">

      <t>An initial goal for this document was to support <xref target="GRPC"/> transport seamlessly without any mapping or extra layering.  However there is an incompatibility of RESTCONF and GRPC.  RESTCONF uses HTTP GET, and GRPC uses HTTP2's POST rather than GET.  As GET is used across RESTCONF for things like capabilities exchange, a seamless mapping depends on specification changes outside the scope of this document.   If/when GRPC supports GET, or RESTCONF is updated to support POST, this should be revisited.  It is hoped that the resulting fix will be transparent to this document.</t>

    </section>
        
    <section title="Examples">
  
      <t>This section is non-normative.  To allow easy comparison, this section mirrors the functional examples shown with NETCONF over XML within <xref target="I-D.draft-ietf-netconf-netconf-event-notifications"/>.  In addition, HTTP2 vs HTTP1.1 headers are not shown as the contents of the JSON encoded objects are identical within.</t>
    
      <section title="Dynamic Subscriptions">
    
    
        <section title="Establishing Dynamic Subscriptions">
      
          <t>The following figure shows two successful "establish-subscription" RPC requests as per <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/>.  The first request is given a subscription identifier of 22, the second, an identifier of 23.</t>

          <figure anchor = "mess-flow-establishment" 
          title="Multiple subscriptions over RESTCONF/HTTP">
            <artwork><![CDATA[
   +------------+                  +-----------+
   | Subscriber |                  | Publisher |
   +------------+                  +-----------+
         |                               |
         |establish-subscription         |
         |------------------------------>|  (a) 
         |     HTTP 200 OK, id#22, URI#1 |
         |<------------------------------|  (b)  
         |POST (URI#1)                   |
         |------------------------------>|  (c)
         | HTTP 200 OK,notif-mesg (id#22)|
         |<------------------------------|
         |                               |
         |                               |
         |stablish-subscription          |
         |------------------------------>|
         |      HTTP 200 OK, id#23, URI#2|
         |<------------------------------|   
         |POST (URI#2)                   |
         |------------------------------>|
         |                               |
         |                               |
         |             notif-mesg (id#22)|
         |<------------------------------|
         | HTTP 200 OK,notif-mesg (id#23)|
         |<------------------------------|
         |                               |                
            ]]></artwork>
          </figure> 
    
          <t>To provide examples of the information being transported, example messages for interactions in  <xref target="mess-flow-establishment"/> are detailed below:</t>
    
          <figure align="center" anchor="establish-subs" title="establish-subscription request (a)"> 
          <artwork><![CDATA[
POST /restconf/operations/subscriptions:establish-subscription
          
{
   "establish-subscription": {
      "stream": {
         "ietf-netconf-subscribed-notifications" : "NETCONF"  
      },
      "stream-xpath-filter": "/ex:foo/",
      "dscp": "10"
   }
}
              ]]></artwork>
          </figure>
        
          <t>As publisher was able to fully satisfy the request, the publisher sends the subscription identifier of the accepted subscription, and the URI:</t>
                
          <figure align="center" anchor="positive-establish-subs" title="establish-subscription success (b)">       
            <artwork><![CDATA[
HTTP status code - 200

{
   "identifier": "22",
   "uri": "/subscriptions/22"
}
          
             ]]></artwork>
          </figure>        

          <t>Upon receipt of the successful response, the subscriber POSTs to the provided URI to start the flow of notification messages.  When the publisher receives this, the subscription becomes ACTIVE (c).</t>
        
          <figure align="center" anchor="positive-establish-post" title="establish-subscription subsequent POST">       
            <artwork><![CDATA[
POST /restconf/operations/subscriptions/22
          
             ]]></artwork>
          </figure>  

          <t>While not shown in <xref target="mess-flow-establishment"/>, if the publisher had not been able to fully satisfy the request, or subscriber has no authorization to establish the subscription, the publisher would have sent an RPC error response. For instance, if the "dscp" value of 10 asserted by the subscriber in <xref target="establish-subs"/> proved unacceptable, the publisher may have returned:</t>
            
          <figure align="center" anchor="negative-establish-subs" title="an unsuccessful establish subscription">       
            <artwork><![CDATA[
      HTTP status code - 406    
          
      { "ietf-restconf:errors" : {
          "error" : [
            {
              "error-type": "application",
              "error-tag": "operation-failed",
              "error-severity": "error",
              "error-app-tag": 
                  "ietf-subscribed-notifications:dscp-unavailable"
            }
          ]
        }
      }

            ]]></artwork>
          </figure> 
        
          <t>The subscriber can use this information in future attempts to establish a subscription.</t>
        
        </section>
      
        <section title="Modifying Dynamic Subscriptions">
      
          <t>An existing subscription may be modified.  The following exchange shows a negotiation of such a modification via several exchanges between a subscriber and a publisher.  This negotiation consists of a failed RPC modification request/response, followed by a successful one.</t>
    
          <figure anchor = "mess-flow-subs-modification"
                title="Interaction model for successful subscription modification">
            <artwork><![CDATA[                  
   +------------+                 +-----------+
   | Subscriber |                 | Publisher |
   +------------+                 +-----------+
         |                              |
         |  notification message (id#23)|
         |<-----------------------------|
         |                              |
         |modify-subscription (id#23)   |
         |----------------------------->|  (d)
         |    HTTP 406 error (with hint)|
         |<-----------------------------|  (e)
         |                              |
         |modify-subscription (id#23)   |
         |----------------------------->|
         |                  HTTP 200 OK |
         |<-----------------------------|
         |                              |
         |            notif-mesg (id#23)|
         |<-----------------------------|
         |                              |          
            ]]></artwork>
          </figure>    
        
          <t>If the subscription being modified in <xref target="mess-flow-subs-modification"/> is a datastore subscription as per <xref target="I-D.ietf-netconf-yang-push"/>, the modification request made in (d) may look like that shown in <xref target="simple-modify-subs"/>.  As can be seen, the modifications being attempted are the application of a new xpath filter as well as the setting of a new periodic time interval.</t>
        
          <figure align="center" anchor="simple-modify-subs" title="Subscription modification request (c)">
            <artwork><![CDATA[
POST /restconf/operations/subscriptions:modify-subscription
          
{
 "modify-subscription": {
    "identifier": "23",
    {
      "ietf-yang-push": "datastore-xpath-filter": 
      "/interfaces-state/interface/oper-status"
    },
    {
      "ietf-yang-push": "periodic": "500"
    }
 }
}
          
            ]]></artwork>
          </figure>
    
          <t>If the publisher can satisfy both changes, the publisher sends a positive result for the RPC. If the publisher cannot satisfy either of the proposed changes, the publisher sends an RPC error response (e).  The following is an example RPC error response for (e) which includes a hint. This hint is an alternative time period value which might have resulted in a successful modification:</t>
        
          <figure align="center" anchor="negative-modify-subs" title="Modify subscription failure with Hint (e)">       
            <artwork><![CDATA[
      HTTP status code - 406

      { "ietf-restconf:errors" : {
          "error" : [
            "error-type": "application",
            "error-tag": "operation-failed",
            "error-severity": "error",
            "error-app-tag": {
              "ietf-yang-push": "ietf-yang-push:period-unsupported"
            },
            "error-info": {
              "ietf-yang-push":
              "modify-subscription-datastore-error-info": {
                 "period-hint": "3000"
              }
            }
          ]
        }
      }
            ]]></artwork>
          </figure>        
     
        </section>
    
        <section title="Deleting Dynamic Subscriptions">
      
          <t>The following demonstrates deleting a subscription.  This subscription may have been to either a stream or a datastore.</t>
                    
          <figure align="center" anchor="simple-delete-subs" title="Delete subscription"> 
            <artwork><![CDATA[     
POST /restconf/operations/subscriptions:delete-subscription
          
{
 "delete-subscription": {
    "identifier": "22"
 }
}        
            ]]></artwork>
          </figure>
                
          <t>If the publisher can satisfy the request, the publisher replies with success to the RPC request.</t>
            

          <t>If the publisher cannot satisfy the request, the publisher sends an error-rpc element indicating the modification didn't work. <xref target="negative-delete-subs"/> shows a valid response for existing valid subscription identifier, but that subscription identifier was created on a different transport session:</t>
                
        <figure align="center" anchor="negative-delete-subs" title="Unsuccessful delete subscription">       
          <artwork><![CDATA[     
      HTTP status code - 406

      { 
        "ietf-restconf:errors" : {
          "error" : [
            "error-type": "application",
            "error-tag": "operation-failed",
            "error-severity": "error",
            "error-app-tag": 
               "ietf-subscribed-notifications:no-such-subscription"
          ]
        }
      }        
            ]]></artwork>
          </figure>     
    
        </section>
    
      </section>

      <section title="Configured Subscriptions">
    
        <t>Configured subscriptions may be established, modified, and deleted using configuration operations against the top-level subtree of <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/> or <xref target="I-D.ietf-netconf-yang-push"/>.</t>
        
        <t>In this section, we present examples of how to manage the configuration subscriptions using a HTTP2 client.</t>

        <section title="Creating Configured Subscriptions">
    
          <t>For subscription creation via configuration operations, a RESTCONF client may send:</t>
                
          <figure align="center" anchor="create-config-subs" title="Create a configured subscription">       
            <artwork><![CDATA[

POST /restconf/operations/subscriptions/
          
{
   "edit-config": {
      "target": {
         "running": null
      },
      "default-operation": "none",
      "config": {
         "subscriptions": {
            "subscription": {
               "identifier": "22",
               "transport": "HTTP2",
               "stream": "NETCONF",
               "receivers": {
                  "receiver": {
                     "name": "receiver1",
                     "address": "1.2.3.4"
                  }
               }
            }
         }
      }
   }
}
            ]]></artwork>
          </figure>
                    
          <t>If the request is accepted, the publisher will indicate this. If the request is not accepted because the publisher cannot serve it, no configuration is changed.  In this case the publisher may reply:</t>
                    
          <figure align="center" anchor="failed-establish-config-subs" title="Response to a failed configured subscription establishment">       
            <artwork><![CDATA[
HTTP status code - 406

{ 
  "ietf-restconf:errors" : {
    "error" : [
      "error-type": "application",
      "error-tag": "resource-denied",
      "error-severity": "error",
      "error-message": {
         "@lang": "en",
         "#text": "Temporarily the publisher cannot serve this
         subscription due to the current workload."
      }
    ]
  }
}
            ]]></artwork>
          </figure>
        
          <t>After a subscription has been created and been verified as VALID, HTTP2 connectivity to each receiver will be established if that connectivity does not already exist. </t>
         
          <t>The following figure shows the interaction model for the successful creation of a configured subscription.</t>
  
          <figure anchor = "mess-flow-subs-establishment-config" 
                title="Interaction model for configured subscription establishment">
            <artwork><![CDATA[                               
 +----------+                 +-----------+     +---------+   
 |Config Ops|                 | Publisher |     | 1.2.3.4 |   
 +----------+                 +-----------+     +---------+   
      |                            |                |   
      |    Capability Exchange     |                |            
      |<-------------------------->|                |            
      |                            |                |            
      |                            |                |         
      |        Edit-config         |                |          
      |--------------------------->|                |           
      |       RPC Reply: OK        |                |            
      |<---------------------------|                |  
      |                            |   Call Home    |            
      |                            |<-------------->|            
      |                            |                |          
      |                            |  subscription- |           
      |                            |  started       |           
      |                            |--------------->|          
      |                            |                |        
      |                            |  notification  |           
      |                            |  message       |            
      |                            |--------------->|                    
            ]]></artwork>
          </figure>

        </section>
      
        <section title="Modifying Configured Subscriptions">
      
          <t>Configured subscriptions can be modified using configuration operations against the top-level container "/subscriptions".</t>
                
          <t>For example, the subscription established in the previous section could be modified as follows, here a adding a second receiver:</t>

          <figure align="center" anchor="modify-configured-subs" title="Modify configured subscription">          
            <artwork><![CDATA[
POST /restconf/operations/subscriptions

{
   "edit-config": {
      "target": {
         "running": null
      },
      "config": {
         "subscriptions": {
            "subscription": {
               "identifier": "1922",
               "receivers": {
                  "receiver": {
                     "name": "receiver2",
                     "address": "1.2.3.5"
                  }
               }
            }
         }
      }
   }
}
             ]]></artwork>
          </figure>
                
          <t>If the request is accepted, the publisher will indicate success.  The result is that the interaction model described in <xref target="mess-flow-subs-establishment-config"/> may be extended as follows.</t>            
          <figure anchor = "mess-flow-subs-modification-configured"
               title="Interaction model for configured subscription modification">
            <artwork><![CDATA[                               
 +----------+                 +-----------+     +---------+  +---------+
 |Config Ops|                 | Publisher |     | 1.2.3.4 |  | 1.2.3.5 |
 +----------+                 +-----------+     +---------+  +---------+
       |                            |  notification  |            |
       |                            |  message       |            |
       |                            |--------------->|            |
       |        Edit-config         |                |            |
       |--------------------------->|                |            |
       |       RPC Reply: OK        |                |            |
       |<---------------------------|                |            |
       |                            |  subscription- |            |
       |                            |  started       |            |
       |                            |---------------------------->|
       |                            |                |            |
       |                            |  notification  |            |
       |                            |  message       |            |
       |                            |--------------->|            |
       |                            |---------------------------->|
       |                            |                |            |     
            ]]></artwork>
          </figure>

          <t>Note in the above that in the specific example above, modifying a configured subscription actually resulted in "subscription-started" notification.  And because of existing HTTP2 connectivity, no additional call home was needed.  Also note that if the edit of the configuration had impacted the filter, a separate modify-subscription would have been required for the original receiver.</t>
            
        </section>
    
        <section title="Deleting Configured Subscriptions">
      
          <t>Configured subscriptions can be deleted using configuration operations against the top-level container "/subscriptions".  Deleting the subscription above would result in the following flow impacting all active receivers.</t>
    
          <figure anchor="mess-flow-subs-deletion-configured"
           title="Interaction model for configured subscription deletion">
             <artwork><![CDATA[
                               
 +----------+                 +-----------+     +---------+  +---------+
 |Config Ops|                 | Publisher |     | 1.2.3.4 |  | 1.2.3.5 |
 +----------+                 +-----------+     +---------+  +---------+
       |                            |                |            |
       |                            |  notification  |            |
       |                            |  message       |            |
       |                            |--------------->|            |
       |                            |---------------------------->|
       |                            |                |            |
       |        Edit-config         |                |            |
       |--------------------------->|                |            |
       |       RPC Reply: OK        |                |            |
       |<---------------------------|                |            |
       |                            |  subscription- |            |
       |                            |  terminated    |            |
       |                            |--------------->|            |
       |                            |---------------------------->|
       |                            |                |            |
           
           ]]></artwork>
          </figure>    
    
        </section>
    
      </section>    

      <section title="Subscription State Notifications">
    
         <t>A publisher will send subscription state notifications according to the definitions within <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/>).</t>

        <section title="subscription-started and subscription-modified">
      
                  
          <t>A "subscription-started" encoded in JSON would look like:</t>    
                        
          <figure align="center" anchor="subscription-started-ctrl-plane-notif" 
                title="subscription-started subscription state notification">       
            <artwork><![CDATA[
{
  "ietf-restconf:notification" : {
    "eventTime": "2007-09-01T10:00:00Z",
    "ietf-subscribed-notifications:subscription-started": {
      "identifier": "39",
      "transport": "HTTP2",
      "stream-xpath-filter": "/ex:foo",
      "stream": {
         "ietf-netconf-subscribed-notifications" : "NETCONF"  
      }
    }
  }
}
             ]]></artwork>
          </figure>

          <t>The "subscription-modified" is identical to <xref target="subscription-started-ctrl-plane-notif"/>, with just the word "started" being replaced by "modified".</t>
    
        </section>
      
        <section title="subscription-completed, subscription-resumed, and replay-complete">
    
          <t>A "subscription-completed" would look like:</t>    
                
          <figure align="center" 
                  anchor="subscription-completed" 
                  title="subscription-completed notification in JSON">       
            <artwork><![CDATA[
          
{
  "ietf-restconf:notification" : {
    "eventTime": "2007-09-01T10:00:00Z",
    "ietf-subscribed-notifications:subscription-completed": {
      "identifier": "39",
    }
  }
}          
             ]]></artwork>
          </figure>
                
          <t>The "subscription-resumed" and "replay-complete" are virtually identical, with "subscription-completed" simply being replaced by "subscription-resumed" and "replay-complete".</t>
    
        </section>
    
        <section title="subscription-terminated and subscription-suspended">

          <t>A "subscription-terminated" would look like:</t>    
                
          <figure align="center" 
                  anchor="subscription-terminated" 
                  title="subscription-terminated subscription state notification">       
            <artwork><![CDATA[
{
  "ietf-restconf:notification" : {
    "eventTime": "2007-09-01T10:00:00Z",
    "ietf-subscribed-notifications:subscription-terminated": {
      "identifier": "39",
      "error-id": "suspension-timeout"
    }
  }
}                     
            ]]></artwork>
          </figure>
                
          <t>The "subscription-suspended" is virtually identical, with "subscription-terminated" simply being replaced by "subscription-suspended".</t>
 
        </section>

      </section>
    
    </section>
    
    <section title="Changes between revisions">
      <t>(To be removed by RFC editor prior to publication)</t>

      <t>v04 - v05</t>
          <t><list style="symbols">
            <t>Error mechanisms updated to match embedded RESTCONF mechanisms</t>
            <t>Restructured format and sections of document.</t>
            <t>Added a YANG data model for HTTP specific parameters.</t>
            <t>Mirrored the examples from the NETCONF transport draft to allow easy comparison.</t>
        </list>
      </t>      
      
      <t>v03 - v04</t>
          <t><list style="symbols">
            <t>Draft not fully synched to new version of subscribed-notifications yet.</t>
            <t>References updated</t>
        </list>
      </t>
      
      
      <t>v02 - v03</t>
          <t><list style="symbols">
            <t>Event notification reframed to notification message.</t>
            <t>Tweaks to wording/capitalization/format.</t>
        </list>
      </t>
      
      <t>v01 - v02</t>
      <t><list style="symbols">
            <t>Removed sections now redundant with <xref target="I-D.draft-ietf-netconf-subscribed-notifications"/> and <xref target="I-D.ietf-netconf-yang-push"/> such as:  mechanisms for subscription maintenance, terminology definitions, stream discovery.</t>
            <t>3rd party subscriptions are out-of-scope.</t>
            <t>SSE only used with RESTCONF and HTTP1.1 dynamic subscriptions</t>
            <t>Timeframes for event tagging are self-defined.</t>
            <t>Clean-up of wording, references to terminology, section numbers.</t>
        </list>
      </t>
      
      <t>v00 - v01</t>
      <t><list style="symbols">
            <t>Removed the ability for more than one subscription to go to a single HTTP2 stream.</t>
            <t>Updated call flows.  Extensively.</t>
            <t>SSE only used with RESTCONF and HTTP1.1 dynamic subscriptions</t>
            <t>HTTP is not used to determine that a receiver has gone silent and is not Receiving Event Notifications</t>
            <t>Many clean-ups of wording and terminology</t>
        </list>
      </t>
      
    </section>
  </back>
</rfc>
